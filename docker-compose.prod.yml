version: "3.8"

services:
  postgres:
    image: postgres:16-alpine
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-cryptomind}
      POSTGRES_USER: ${POSTGRES_USER:-cryptouser}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - db_data:/var/lib/postgresql/data
      - ./scripts/init_db.sql:/docker-entrypoint-initdb.d/init_db.sql:ro
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $$POSTGRES_USER -d $$POSTGRES_DB"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped
    networks:
      - cryptomind-network

  backend:
    build: 
      context: ./backend
      target: production
    depends_on:
      postgres:
        condition: service_healthy
    env_file: .env
    environment:
      DATABASE_URL: ${DATABASE_URL}
      CORS_ORIGINS: ${CORS_ORIGINS}
      WEIGHT_TECHNICAL: ${WEIGHT_TECHNICAL}
      WEIGHT_ONCHAIN: ${WEIGHT_ONCHAIN}
      WEIGHT_SENTIMENT: ${WEIGHT_SENTIMENT}
    restart: unless-stopped
    networks:
      - cryptomind-network

  frontend:
    build:
      context: ./frontend
      target: production
    depends_on:
      - backend
    restart: unless-stopped
    networks:
      - cryptomind-network

  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
    depends_on:
      - frontend
      - backend
    restart: unless-stopped
    networks:
      - cryptomind-network

volumes:
  db_data:

networks:
  cryptomind-network:
    driver: bridge
